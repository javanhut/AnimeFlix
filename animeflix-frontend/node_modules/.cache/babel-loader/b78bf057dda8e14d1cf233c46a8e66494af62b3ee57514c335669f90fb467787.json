{"ast":null,"code":"var _jsxFileName = \"/home/javanstorm/AnimeFlix/animeflix-frontend/src/components/EpisodeModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './EpisodeModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpisodeModal = ({\n  isOpen,\n  onClose,\n  content\n}) => {\n  _s();\n  const [selectedSeason, setSelectedSeason] = useState(1);\n  const [episodes, setEpisodes] = useState([]);\n  const [viewMode, setViewMode] = useState('seasons'); // 'seasons' or 'release'\n  const [sortedEpisodes, setSortedEpisodes] = useState([]);\n  const [watchProgress, setWatchProgress] = useState({});\n  const [isInList, setIsInList] = useState(false);\n  const navigate = useNavigate();\n\n  // Load watch progress from localStorage\n  useEffect(() => {\n    if (content) {\n      const savedProgress = localStorage.getItem(`watch_progress_${content.id}`);\n      if (savedProgress) {\n        setWatchProgress(JSON.parse(savedProgress));\n      }\n    }\n  }, [content]);\n\n  // Check if content is in My List\n  useEffect(() => {\n    if (content) {\n      const myList = JSON.parse(localStorage.getItem('myList') || '[]');\n      setIsInList(myList.some(item => item.id === content.id));\n    }\n  }, [content]);\n\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.classList.add('modal-open');\n    } else {\n      document.body.classList.remove('modal-open');\n    }\n\n    // Cleanup function to remove class when component unmounts\n    return () => {\n      document.body.classList.remove('modal-open');\n    };\n  }, [isOpen]);\n  useEffect(() => {\n    if (content && content.seasons) {\n      if (viewMode === 'seasons') {\n        setEpisodes(content.seasons[selectedSeason] || []);\n      } else if (viewMode === 'release') {\n        // Flatten all episodes and sort by air date or season/episode number\n        const allEpisodes = [];\n        Object.keys(content.seasons).forEach(seasonKey => {\n          content.seasons[seasonKey].forEach(episode => {\n            allEpisodes.push({\n              ...episode,\n              seasonNumber: parseInt(seasonKey)\n            });\n          });\n        });\n\n        // Sort by season and episode number (chronological release order)\n        allEpisodes.sort((a, b) => {\n          if (a.seasonNumber !== b.seasonNumber) {\n            return a.seasonNumber - b.seasonNumber;\n          }\n          return a.episode - b.episode;\n        });\n        setSortedEpisodes(allEpisodes);\n        setEpisodes(allEpisodes);\n      }\n    } else if (content && content.type === 'movie') {\n      // For movies, create a single \"episode\" entry\n      const movieEpisode = [{\n        id: content.id,\n        title: content.title,\n        description: content.description,\n        thumbnail: content.thumbnail,\n        duration: content.duration,\n        videoUrl: content.videoUrl\n      }];\n      setEpisodes(movieEpisode);\n    } else {\n      setEpisodes([]);\n    }\n  }, [content, selectedSeason, viewMode]);\n  const handleEpisodeSelect = episode => {\n    // Navigate to player with episode data\n    navigate(`/watch/${content.id}/${episode.id}`, {\n      state: {\n        episode,\n        content,\n        autoPlay: true\n      }\n    });\n    onClose();\n  };\n  const handlePlayFromStart = () => {\n    // For movies, handle directly\n    if (isMovie) {\n      const movieEpisode = {\n        id: content.id,\n        title: content.title,\n        description: content.description,\n        thumbnail: content.thumbnail,\n        duration: content.duration,\n        videoUrl: content.videoUrl\n      };\n      handleEpisodeSelect(movieEpisode);\n      return;\n    }\n\n    // For series\n    if (episodes.length > 0) {\n      // Find the last watched episode or start from the first\n      const lastWatchedEpisodeId = hasWatchProgress ? Object.keys(watchProgress).reduce((latest, episodeId) => {\n        if (!latest || watchProgress[episodeId].timestamp > watchProgress[latest].timestamp) {\n          return episodeId;\n        }\n        return latest;\n      }, null) : null;\n      if (lastWatchedEpisodeId && watchProgress[lastWatchedEpisodeId].progress < 0.9) {\n        // Resume from last watched episode if not completed\n        const resumeEpisode = findEpisodeById(lastWatchedEpisodeId);\n        if (resumeEpisode) {\n          handleEpisodeSelect(resumeEpisode);\n          return;\n        }\n      }\n\n      // Default to first episode\n      handleEpisodeSelect(episodes[0]);\n    } else if (content && content.seasons) {\n      // Fallback: find first episode from seasons\n      const firstSeason = Object.keys(content.seasons)[0];\n      if (firstSeason && content.seasons[firstSeason].length > 0) {\n        handleEpisodeSelect(content.seasons[firstSeason][0]);\n      }\n    }\n  };\n  const findEpisodeById = episodeId => {\n    if (content && content.seasons) {\n      for (const seasonKey in content.seasons) {\n        const episode = content.seasons[seasonKey].find(ep => ep.id === episodeId);\n        if (episode) return episode;\n      }\n    }\n    return null;\n  };\n  const handleListToggle = () => {\n    const myList = JSON.parse(localStorage.getItem('myList') || '[]');\n    if (isInList) {\n      // Remove from list\n      const updatedList = myList.filter(item => item.id !== content.id);\n      localStorage.setItem('myList', JSON.stringify(updatedList));\n      setIsInList(false);\n    } else {\n      // Add to list\n      const updatedList = [...myList, content];\n      localStorage.setItem('myList', JSON.stringify(updatedList));\n      setIsInList(true);\n    }\n  };\n  if (!isOpen || !content) return null;\n  const isMovie = content.type === 'movie' || content.episodes === 1;\n  const totalSeasons = content.seasons ? Object.keys(content.seasons).length : 1;\n\n  // Determine if we should show \"Resume\" or \"Play\"\n  const hasWatchProgress = Object.keys(watchProgress).length > 0;\n  const lastWatchedEpisodeId = hasWatchProgress ? Object.keys(watchProgress).reduce((latest, episodeId) => {\n    if (!latest || watchProgress[episodeId].timestamp > watchProgress[latest].timestamp) {\n      return episodeId;\n    }\n    return latest;\n  }, null) : null;\n  const shouldShowResume = hasWatchProgress && lastWatchedEpisodeId && watchProgress[lastWatchedEpisodeId].progress < 0.9;\n  console.log('DEBUG - Modal render:', {\n    isOpen,\n    content: !!content,\n    contentTitle: content === null || content === void 0 ? void 0 : content.title,\n    isMovie,\n    episodesLength: episodes.length,\n    hasSeasons: !!(content && content.seasons),\n    shouldShowResume\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"episode-modal-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"episode-modal\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modal-close\",\n        onClick: onClose,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-banner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner-image-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: content.backdrop || content.thumbnail,\n            alt: content.title,\n            className: \"banner-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"banner-top-hover\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"banner-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Release Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"release-date\",\n                children: content.releaseDate || content.year || 'Unknown'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"banner-description\",\n                children: content.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"banner-bottom-hover\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-content-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"modal-title\",\n                children: content.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-meta\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"rating\",\n                  children: content.rating\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"year\",\n                  children: content.year\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"type\",\n                  children: isMovie ? 'Movie' : `${content.episodes} Episodes`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"modal-description\",\n                children: content.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-genres\",\n                children: (content.genres || content.genre || []).map(genre => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"genre-tag\",\n                  children: genre\n                }, genre, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-episodes\",\n        children: [!isMovie && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"episodes-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `toggle-btn ${viewMode === 'seasons' ? 'active' : ''}`,\n              onClick: () => setViewMode('seasons'),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-list\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 19\n              }, this), \"By Season\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `toggle-btn ${viewMode === 'release' ? 'active' : ''}`,\n              onClick: () => setViewMode('release'),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-calendar-alt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this), \"Release Order\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-play-episodes\",\n              onClick: handleListToggle,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fas ${isInList ? 'fa-check' : 'fa-plus'}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: isInList ? 'In My List' : 'Add to List'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }, this), viewMode === 'seasons' && totalSeasons > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"season-selector\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"season-select\",\n                children: \"Season:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"season-select\",\n                value: selectedSeason,\n                onChange: e => setSelectedSeason(parseInt(e.target.value)),\n                className: \"season-dropdown\",\n                children: Array.from({\n                  length: totalSeasons\n                }, (_, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: i + 1,\n                  children: [\"Season \", i + 1]\n                }, i + 1, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-play-episodes\",\n              onClick: handlePlayFromStart,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-play\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 19\n              }, this), shouldShowResume ? 'Resume' : 'Play']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"episodes-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"episodes-list-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: isMovie ? 'Movie Details' : viewMode === 'seasons' ? `Season ${selectedSeason} Episodes` : `All Episodes (${content.episodes} total)`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this), isMovie && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-play-episodes\",\n              onClick: handlePlayFromStart,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-play\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 19\n              }, this), \"Play Movie\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"episodes-grid\",\n            children: episodes.map((episode, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"episode-card\",\n              onClick: () => handleEpisodeSelect(episode),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"episode-thumbnail\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: episode.thumbnail || content.thumbnail,\n                  alt: episode.title,\n                  onError: e => {\n                    e.target.src = content.thumbnail;\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"episode-play-overlay\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fas fa-play\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 316,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"episode-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"episode-header\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"episode-number\",\n                    children: isMovie ? '' : viewMode === 'release' ? `S${episode.seasonNumber}E${episode.episode}` : `${index + 1}.`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"episode-title\",\n                    children: episode.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"episode-duration\",\n                    children: episode.duration || content.duration\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"episode-description\",\n                  children: episode.description || content.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 19\n              }, this)]\n            }, episode.id || index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(EpisodeModal, \"MO1MMyWiW1Pf/hMtUepuHDKo7yc=\", false, function () {\n  return [useNavigate];\n});\n_c = EpisodeModal;\nexport default EpisodeModal;\nvar _c;\n$RefreshReg$(_c, \"EpisodeModal\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","EpisodeModal","isOpen","onClose","content","_s","selectedSeason","setSelectedSeason","episodes","setEpisodes","viewMode","setViewMode","sortedEpisodes","setSortedEpisodes","watchProgress","setWatchProgress","isInList","setIsInList","navigate","savedProgress","localStorage","getItem","id","JSON","parse","myList","some","item","document","body","classList","add","remove","seasons","allEpisodes","Object","keys","forEach","seasonKey","episode","push","seasonNumber","parseInt","sort","a","b","type","movieEpisode","title","description","thumbnail","duration","videoUrl","handleEpisodeSelect","state","autoPlay","handlePlayFromStart","isMovie","length","lastWatchedEpisodeId","hasWatchProgress","reduce","latest","episodeId","timestamp","progress","resumeEpisode","findEpisodeById","firstSeason","find","ep","handleListToggle","updatedList","filter","setItem","stringify","totalSeasons","shouldShowResume","console","log","contentTitle","episodesLength","hasSeasons","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","src","backdrop","alt","releaseDate","year","rating","genres","genre","map","htmlFor","value","onChange","target","Array","from","_","i","index","onError","_c","$RefreshReg$"],"sources":["/home/javanstorm/AnimeFlix/animeflix-frontend/src/components/EpisodeModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './EpisodeModal.css';\n\nconst EpisodeModal = ({ isOpen, onClose, content }) => {\n  const [selectedSeason, setSelectedSeason] = useState(1);\n  const [episodes, setEpisodes] = useState([]);\n  const [viewMode, setViewMode] = useState('seasons'); // 'seasons' or 'release'\n  const [sortedEpisodes, setSortedEpisodes] = useState([]);\n  const [watchProgress, setWatchProgress] = useState({});\n  const [isInList, setIsInList] = useState(false);\n  const navigate = useNavigate();\n\n  // Load watch progress from localStorage\n  useEffect(() => {\n    if (content) {\n      const savedProgress = localStorage.getItem(`watch_progress_${content.id}`);\n      if (savedProgress) {\n        setWatchProgress(JSON.parse(savedProgress));\n      }\n    }\n  }, [content]);\n\n  // Check if content is in My List\n  useEffect(() => {\n    if (content) {\n      const myList = JSON.parse(localStorage.getItem('myList') || '[]');\n      setIsInList(myList.some(item => item.id === content.id));\n    }\n  }, [content]);\n\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.classList.add('modal-open');\n    } else {\n      document.body.classList.remove('modal-open');\n    }\n\n    // Cleanup function to remove class when component unmounts\n    return () => {\n      document.body.classList.remove('modal-open');\n    };\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (content && content.seasons) {\n      if (viewMode === 'seasons') {\n        setEpisodes(content.seasons[selectedSeason] || []);\n      } else if (viewMode === 'release') {\n        // Flatten all episodes and sort by air date or season/episode number\n        const allEpisodes = [];\n        Object.keys(content.seasons).forEach(seasonKey => {\n          content.seasons[seasonKey].forEach(episode => {\n            allEpisodes.push({\n              ...episode,\n              seasonNumber: parseInt(seasonKey)\n            });\n          });\n        });\n        \n        // Sort by season and episode number (chronological release order)\n        allEpisodes.sort((a, b) => {\n          if (a.seasonNumber !== b.seasonNumber) {\n            return a.seasonNumber - b.seasonNumber;\n          }\n          return a.episode - b.episode;\n        });\n        \n        setSortedEpisodes(allEpisodes);\n        setEpisodes(allEpisodes);\n      }\n    } else if (content && content.type === 'movie') {\n      // For movies, create a single \"episode\" entry\n      const movieEpisode = [{\n        id: content.id,\n        title: content.title,\n        description: content.description,\n        thumbnail: content.thumbnail,\n        duration: content.duration,\n        videoUrl: content.videoUrl\n      }];\n      setEpisodes(movieEpisode);\n    } else {\n      setEpisodes([]);\n    }\n  }, [content, selectedSeason, viewMode]);\n\n  const handleEpisodeSelect = (episode) => {\n    // Navigate to player with episode data\n    navigate(`/watch/${content.id}/${episode.id}`, {\n      state: { episode, content, autoPlay: true }\n    });\n    onClose();\n  };\n\n  const handlePlayFromStart = () => {\n    // For movies, handle directly\n    if (isMovie) {\n      const movieEpisode = {\n        id: content.id,\n        title: content.title,\n        description: content.description,\n        thumbnail: content.thumbnail,\n        duration: content.duration,\n        videoUrl: content.videoUrl\n      };\n      handleEpisodeSelect(movieEpisode);\n      return;\n    }\n\n    // For series\n    if (episodes.length > 0) {\n      // Find the last watched episode or start from the first\n      const lastWatchedEpisodeId = hasWatchProgress ? Object.keys(watchProgress).reduce((latest, episodeId) => {\n        if (!latest || watchProgress[episodeId].timestamp > watchProgress[latest].timestamp) {\n          return episodeId;\n        }\n        return latest;\n      }, null) : null;\n\n      if (lastWatchedEpisodeId && watchProgress[lastWatchedEpisodeId].progress < 0.9) {\n        // Resume from last watched episode if not completed\n        const resumeEpisode = findEpisodeById(lastWatchedEpisodeId);\n        if (resumeEpisode) {\n          handleEpisodeSelect(resumeEpisode);\n          return;\n        }\n      }\n      \n      // Default to first episode\n      handleEpisodeSelect(episodes[0]);\n    } else if (content && content.seasons) {\n      // Fallback: find first episode from seasons\n      const firstSeason = Object.keys(content.seasons)[0];\n      if (firstSeason && content.seasons[firstSeason].length > 0) {\n        handleEpisodeSelect(content.seasons[firstSeason][0]);\n      }\n    }\n  };\n\n  const findEpisodeById = (episodeId) => {\n    if (content && content.seasons) {\n      for (const seasonKey in content.seasons) {\n        const episode = content.seasons[seasonKey].find(ep => ep.id === episodeId);\n        if (episode) return episode;\n      }\n    }\n    return null;\n  };\n\n  const handleListToggle = () => {\n    const myList = JSON.parse(localStorage.getItem('myList') || '[]');\n    \n    if (isInList) {\n      // Remove from list\n      const updatedList = myList.filter(item => item.id !== content.id);\n      localStorage.setItem('myList', JSON.stringify(updatedList));\n      setIsInList(false);\n    } else {\n      // Add to list\n      const updatedList = [...myList, content];\n      localStorage.setItem('myList', JSON.stringify(updatedList));\n      setIsInList(true);\n    }\n  };\n\n  if (!isOpen || !content) return null;\n\n  const isMovie = content.type === 'movie' || content.episodes === 1;\n  const totalSeasons = content.seasons ? Object.keys(content.seasons).length : 1;\n  \n  // Determine if we should show \"Resume\" or \"Play\"\n  const hasWatchProgress = Object.keys(watchProgress).length > 0;\n  const lastWatchedEpisodeId = hasWatchProgress ? Object.keys(watchProgress).reduce((latest, episodeId) => {\n    if (!latest || watchProgress[episodeId].timestamp > watchProgress[latest].timestamp) {\n      return episodeId;\n    }\n    return latest;\n  }, null) : null;\n  const shouldShowResume = hasWatchProgress && lastWatchedEpisodeId && watchProgress[lastWatchedEpisodeId].progress < 0.9;\n\n  console.log('DEBUG - Modal render:', {\n    isOpen,\n    content: !!content,\n    contentTitle: content?.title,\n    isMovie,\n    episodesLength: episodes.length,\n    hasSeasons: !!(content && content.seasons),\n    shouldShowResume\n  });\n\n  return (\n    <div className=\"episode-modal-overlay\" onClick={onClose}>\n      <div className=\"episode-modal\" onClick={(e) => e.stopPropagation()}>\n        <button className=\"modal-close\" onClick={onClose}>\n          <i className=\"fas fa-times\"></i>\n        </button>\n        \n        {/* Banner Section */}\n        <div className=\"modal-banner\">\n          <div className=\"banner-image-container\">\n            <img \n              src={content.backdrop || content.thumbnail} \n              alt={content.title}\n              className=\"banner-image\"\n            />\n            <div className=\"banner-top-hover\">\n              <div className=\"banner-info\">\n                <h3>Release Date</h3>\n                <p className=\"release-date\">{content.releaseDate || content.year || 'Unknown'}</p>\n                <h3>Description</h3>\n                <p className=\"banner-description\">{content.description}</p>\n              </div>\n            </div>\n            <div className=\"banner-bottom-hover\">\n              <div className=\"modal-content-info\">\n                <h1 className=\"modal-title\">{content.title}</h1>\n                <div className=\"modal-meta\">\n                  <span className=\"rating\">{content.rating}</span>\n                  <span className=\"year\">{content.year}</span>\n                  <span className=\"type\">{isMovie ? 'Movie' : `${content.episodes} Episodes`}</span>\n                </div>\n                <p className=\"modal-description\">{content.description}</p>\n                <div className=\"modal-genres\">\n                  {(content.genres || content.genre || []).map(genre => (\n                    <span key={genre} className=\"genre-tag\">{genre}</span>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"modal-episodes\">\n          {!isMovie && (\n            <div className=\"episodes-header\">\n              <div className=\"view-toggle\">\n                <button \n                  className={`toggle-btn ${viewMode === 'seasons' ? 'active' : ''}`}\n                  onClick={() => setViewMode('seasons')}\n                >\n                  <i className=\"fas fa-list\"></i>\n                  By Season\n                </button>\n                <button \n                  className={`toggle-btn ${viewMode === 'release' ? 'active' : ''}`}\n                  onClick={() => setViewMode('release')}\n                >\n                  <i className=\"fas fa-calendar-alt\"></i>\n                  Release Order\n                </button>\n              </div>\n              \n              <div className=\"header-controls\">\n                <button className=\"btn-play-episodes\" onClick={handleListToggle}>\n                  <i className={`fas ${isInList ? 'fa-check' : 'fa-plus'}`}></i>\n                  <span>{isInList ? 'In My List' : 'Add to List'}</span>\n                </button>\n                {viewMode === 'seasons' && totalSeasons > 1 && (\n                  <div className=\"season-selector\">\n                    <label htmlFor=\"season-select\">Season:</label>\n                    <select \n                      id=\"season-select\"\n                      value={selectedSeason} \n                      onChange={(e) => setSelectedSeason(parseInt(e.target.value))}\n                      className=\"season-dropdown\"\n                    >\n                      {Array.from({length: totalSeasons}, (_, i) => (\n                        <option key={i + 1} value={i + 1}>Season {i + 1}</option>\n                      ))}\n                    </select>\n                  </div>\n                )}\n                <button className=\"btn-play-episodes\" onClick={handlePlayFromStart}>\n                  <i className=\"fas fa-play\"></i>\n                  {shouldShowResume ? 'Resume' : 'Play'}\n                </button>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"episodes-list\">\n            <div className=\"episodes-list-header\">\n              <h3>\n                {isMovie \n                  ? 'Movie Details' \n                  : viewMode === 'seasons' \n                    ? `Season ${selectedSeason} Episodes`\n                    : `All Episodes (${content.episodes} total)`\n                }\n              </h3>\n              {isMovie && (\n                <button className=\"btn-play-episodes\" onClick={handlePlayFromStart}>\n                  <i className=\"fas fa-play\"></i>\n                  Play Movie\n                </button>\n              )}\n            </div>\n            <div className=\"episodes-grid\">\n              {episodes.map((episode, index) => (\n                <div \n                  key={episode.id || index} \n                  className=\"episode-card\"\n                  onClick={() => handleEpisodeSelect(episode)}\n                >\n                  <div className=\"episode-thumbnail\">\n                    <img \n                      src={episode.thumbnail || content.thumbnail} \n                      alt={episode.title}\n                      onError={(e) => {\n                        e.target.src = content.thumbnail;\n                      }}\n                    />\n                    <div className=\"episode-play-overlay\">\n                      <i className=\"fas fa-play\"></i>\n                    </div>\n                  </div>\n                  \n                  <div className=\"episode-info\">\n                    <div className=\"episode-header\">\n                      <span className=\"episode-number\">\n                        {isMovie \n                          ? '' \n                          : viewMode === 'release' \n                            ? `S${episode.seasonNumber}E${episode.episode}` \n                            : `${index + 1}.`\n                        }\n                      </span>\n                      <h4 className=\"episode-title\">{episode.title}</h4>\n                      <span className=\"episode-duration\">{episode.duration || content.duration}</span>\n                    </div>\n                    <p className=\"episode-description\">{episode.description || content.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EpisodeModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}